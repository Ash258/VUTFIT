plugins {
    id 'java'
    id 'idea'
}

group 'IVS'
version '1.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    jcenter()
    mavenCentral()
}

sourceSets {
    main {
        java.srcDirs = ['src/math/main/java', 'src/gui/main/java', 'src/profiling/main/java']
        resources.srcDirs = ['src/gui/main/res', 'src/gui/main/res', 'src/profiling/main/res']
    }

    test {
        java.srcDirs = ['src/math/test/java', 'src/gui/test/java', 'src/profiling/test/java']
        resources.srcDirs = ['src/gui/test/res', 'src/gui/test/res', 'src/profiling/test/res']
    }
}

dependencies {
    compile group: 'org.apfloat', name: 'apfloat', version: '1.8.2'
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-common', version: '2.25.1'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.8.3'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.7-M5'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'com.tngtech.java', name: 'junit-dataprovider', version: '1.10.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
}

jar {
    manifest.attributes 'Main-Class': 'ivs.ignis.gui.CalculatorFX',
                        'Implementation-Title': project.name,
                        'Source-Compatibility': project.sourceCompatibility,
                        'Implementation-Version': project.version,
                        'Implementation-Vendor': project.group,
                        'Built-JDK': System.getProperty('java.version')
    from {configurations.compile.collect {it.isDirectory() ? it : zipTree(it)}}
}

task runJar(dependsOn: jar, type: JavaExec) {
    main = "-jar"
    args = ["${rootDir}/build/libs/${rootProject.name}-${version}.jar"]
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

task doxygen() {
    exec {
        executable 'doxygen'
        args = ["${new File(projectDir, "src/Doxyfile")}"]
    }
}
task archiveZip(type: Zip) {
    def base = 'xparma02_xbargl01_xcaber00_xsimon24'
    archiveName = base + '.zip'
    // Exclude junk folders, which are generated.
    exclude '.gradle'
    exclude 'build'
    exclude '.idea'
    def absoluteRoot = project.rootDir.absolutePath

    from(absoluteRoot) {into "$base/repo"}

    from("$absoluteRoot/.git") {into "$base/repo/.git"}
    doxygen
    from("$absoluteRoot/docs/technical/doxygen") {into "$base/doc"}

    from("$absoluteRoot/installers/final") {into "$base/install"}
}
